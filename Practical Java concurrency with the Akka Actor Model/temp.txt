
 In this chapter, we're going to create our first actor. This first actor won't be able to do very much. It will be able to receive a message and print something to the screen. Although, that doesn't sound very useful, it will allow us to explore some of the complexity of Akka code. If you want to look at a complete Akka application right now, you would see a lot of quite complex looking code, and I don't wanna put you off. So we're going to start with this really simple example first of all and then build up to the more complicated looking Akka code that you'll be very familiar with, very comfortable with, and happy to write yourself by the end of this course. So to create code in Akka, we need to have a couple of Java files in our projects. And the easiest way to get these is to use a build tool like Maven. So copy along with me and let's create a new Maven project. So I'm choosing a new project. I'm going to set Maven as the project type. I don't want to choose an archetype. I want to do everything manually, so I'm just going to click Next, and we'll give the project a name, which I think this time could be "Akka Big Primes". Okay, I'm going to click on Finish and then what we'll do is open up the project's pom file and start editing this to get to the dependencies that we need into our application. So we're going to need some dependencies. So let's start in a dependencies tag, and in here the first dependency is going to be a group Id of com.typesafe.akka, and the artefact id will be a akka-actor-typed, and then we'll need an underscore and a number, and that number, we're going to go with is latest available version which is 2.13. We're also going to have a version number in here, which is going to be the latest version of Akka. At the time of recording, that is 2.6.3. And I know it's not showing up here, but it will be able to retrieve this when I run the pom in it and import that. And in fact, while I'm just importing that to make sure that can be found, I'm just gonna say a little bit about what I've typed in here. This one Java file is the minimum that we need to start creating actors with Akka. The actual artefact Id is akka-actor-typed. Now, this is the newer API for Akka that was actually made production ready in version 2.6. So in order to use akka-actor-typed, which is what we're going to be using on this course, then you must make sure the version of Akka that you're using is at least 2.6. If you're using an older version of Akka, you'll be forced to use what's called the "Classic API". Now you can use either newer typed API, or the Classic API if you're on version 2.6 or above. And by using this akka-actor-typed that allows us to choose which API we're going to work with. I'm going to mention a couple of things about the Classic API a little bit later on in the course, probably when we look at the documentation, but for now we're always going to be working with akka-actor-typed, which is as I said the newer API. The other thing is that you're looking here at two different version numbers, so I want to just explain that as well. The 2.6.3 is the version number of Akka. So that is, as I mentioned at the time of recording, the latest version of Akka available. This number here 2.13, actually refers to version of Scala that Akka is using. The Akka library is written in Scala, not Java, but you don't need to know any Scala or even have Scala on your machine to use Akka. We won't be writing any Scala in this course, but I just wanted to make clear, the two different numbers here and what they refer to. When I didn't mention Akka documentation, so actually now might be a good time, just have a very quick look at that. The starting point for the Akka documentation is this website I've got on screen, which is akka.io/docs. Now, if you look in this section here Akka Actors, most of the documentation we're going to be interested we'll find from the links here. There are three links called Reference, Scala API, and Java API. If you click on the Java API link, what you'll actually get are the Java docs for the Akka library. Now these will be useful, and we may well look at these at some point in the course, but most of the time what you'll probably find more useful, is to click on this link here that says Reference. Now when you're on this page, the first thing hopefully you'll notice that there is a drop down here to choose whether you're interested in Scala or Java. And as you can see at the moment I've got Java selected. If you're on any of the pages in the documentation, for example I'm just going to click on Actor Lifecycle here. The documentation is relatively readable and throughout the documentation you will see code snippets here. And the code snippets are available either as Java code snippets or as Scala code snippets. But, whatever you've selected in this dropdown will determine which of these you see by default. So it's useful to make sure you've got Java here. There's a search facility here, so for example if we were interested in behaviours, I could be typing in the word behaviour and it will give me links to pages that might well be interesting for us to have a look at. So, that's the starting point then for the Akka documentation. The only other thing I want to just point out then, is that by default you will be looking at the documentation for the newer typed API. But, at the top of the page there'll be a link to take you to the older Classic documentation. The older Classic API. If I click on that, at the top of any page that's relating to the Classic documentation, there'll be some kind of note to tell you this is relating to the original or older API. And actually there'll be a link to the relevant, newer API page. So, if you're doing a search through the documentation, maybe you've searched on Google for example, it's taken you to one of these pages. Just check at the top of every page that you're looking at the Akka typed API, and if you're not there will be a link to click on to take you to the relevant page. Okay, well let's go back to Maven. Now, as well as the Akka dependency, we will need to get a logger into our system. Some kind of logging system, because Akka uses log4j and that will require an underlying logging framework. Now they recommend that you use log back, so we'll do that for this course. So, let's put in another dependency here. And the group ID's going to be ch.qos.logback and the artefact ID is logback-classic and we'll put a version number in here as well. And at the time of recording the latest version, I think is 1.2.3. Okay, I think that's going to be all right. And these are the minimum that you need to create an Akka system. But, while we're in the pom, I'm going to add in a couple of further dependencies that we will need later on in the course. And that is just to allow us to write unit tests for our actors. There's going to be a whole chapter on testing, so we won't need this until we reach that chapter, but as we're in the pom let's add them in, and then everything will be, hopefully, ready for us to use and start coding. So, the first thing I'm going to do is add in a dependency for J unit, so let's put that in next. And we'll use J unit 5, the latest version of J unit in this course. So, that's going to have a group ID of org.junit-jupiter and an artefact ID which will be junit-jupiter-api and the latest version again at the time of recording this course is 5.5.2. Incidentally, if you want to use a later version of any of these that should be absolutely fine. I will put in a scope, I think of tests for J unit, that would make sense. And then as well as the Jupiter API, we also need the J unit Jupiter engine. So, I'm going to copy this dependency and paste it in again. And this time rather than J unit Jupiter API, it'll be J unit Jupiter engine. And then finally to be able to write unit tests for our Akka system, there's another dependency we need which is called the Akka Test Kit. So, I think I'll put this one next to the Akka one. So, in fact let's copy and paste the dependency and then we'll edit it. So, on our second version rather than being akka-actor-typed, it's akka-actor-testkit-typed. Now, it's important that the version numbers for our underlying Akka system and the test kit are the same. So, in case we want to change one of these in the future, I think I'm going to extract this and have this as a version number outside of my dependency system. So, let's create a new section called properties, and then in here we'll have a akka-version, which we'll set to 2.6.3, we'll set the version here then to be in curly brackets akka-version, and we'll do the same thing for the test kit as well. And then hopefully, that should be my pom complete. Oh, I just need to put the dollar symbols in of course, before the curly brackets. Okay, that should be everything complete. I'm going to enable auto import in my ID, get all the changes into my project. If you're following along with me and you're not sure you've got everything right, this pom file will be in the workspace for the closing project for this chapter. So, do go and have a look at that if you need to, but hopefully, you'll have everything working.And that means our project is set up and we're ready to start.
